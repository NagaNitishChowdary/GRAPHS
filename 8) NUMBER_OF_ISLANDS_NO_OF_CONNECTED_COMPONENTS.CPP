// PROBLEM LINK --- https://practice.geeksforgeeks.org/problems/find-the-number-of-islands/1?utm_source=youtube&utm_medium=collab_striver_ytdescription&utm_campaign=find_the_number_of_islands

#include <bits/stdc++.h>
using namespace std;

void bfs(int row,int col,vector<vector<int>> &vis,vector<vector<char>> &grid){
    int n = grid.size() ;
    int m = grid[0].size() ;
    vis[row][col] = 1 ;
    queue<pair<int,int>> q ;
    q.push({row,col}) ;
    while(!q.empty()){
        int row = q.front().first ;
        int col = q.front().second ;
        q.pop() ;
        // TRAVERSE IN THE NEIGHBOURS AND MARK THEM VISITED IF IT IS A LAND 
        for(int delrow=-1 ; delrow<=1 ; delrow++){
            for(int delcol=-1 ; delcol<=1 ; delcol++){
                int nrow = row + delrow ;
                int ncol = col + delcol ;
                if(nrow>=0 && nrow<n && ncol>=0 && ncol<m && grid[nrow][ncol] == '1' && !vis[nrow][ncol]){
                    vis[nrow][ncol] = 1 ;
                    q.push({nrow,ncol}) ;
                }
            }
        }
    }
}

int numIslands(vector<vector<char>>& grid) {
    int n = grid.size() ;
    int m = grid[0].size() ;
    int cnt = 0 ;
    vector<vector<int>> vis(n,vector<int>(m,0)) ;
    for(int row=0 ; row<n ; row++){
        for(int col=0 ; col<m ; col++){
            // cout << grid[row][col] << " " ;
            if(grid[row][col] == '1' && !vis[row][col]){
                cnt++ ;
                bfs(row,col,vis,grid) ;
            }
        }
        // cout << endl ;
    }
    return cnt ;
}

int main() {
    int tc;
    cin >> tc;
    while (tc--) {
        int n, m;
        cin >> n >> m;
        vector<vector<char>> grid(n, vector<char>(m, '#'));
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                cin >> grid[i][j];
            }
        }
        int ans = numIslands(grid);
        cout << ans << '\n';
    }
    return 0;
}
